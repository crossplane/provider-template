/*
Copyright 2025 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package {{ .Env.APIVERSION }}

import (
	"reflect"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

// {{ .Env.KIND }}Parameters are the configurable fields of a {{ .Env.KIND }}.
type {{ .Env.KIND }}Parameters struct {
	ConfigurableField string `json:"configurableField"`
}

// {{ .Env.KIND }}Observation are the observable fields of a {{ .Env.KIND }}.
type {{ .Env.KIND }}Observation struct {
	ConfigurableField string `json:"configurableField"`
	ObservableField   string `json:"observableField,omitempty"`
}

// A {{ .Env.KIND }}Spec defines the desired state of a {{ .Env.KIND }}.
type {{ .Env.KIND }}Spec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       {{ .Env.KIND }}Parameters `json:"forProvider"`
}

// A {{ .Env.KIND }}Status represents the observed state of a {{ .Env.KIND }}.
type {{ .Env.KIND }}Status struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          {{ .Env.KIND }}Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// A {{ .Env.KIND }} is an example API type.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,{{ .Env.PROVIDER | strings.ToLower }}}
type {{ .Env.KIND }} struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   {{ .Env.KIND }}Spec   `json:"spec"`
	Status {{ .Env.KIND }}Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// {{ .Env.KIND }}List contains a list of {{ .Env.KIND }}
type {{ .Env.KIND }}List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []{{ .Env.KIND }} `json:"items"`
}

// {{ .Env.KIND }} type metadata.
var (
	{{ .Env.KIND }}Kind             = reflect.TypeOf({{ .Env.KIND }}{}).Name()
	{{ .Env.KIND }}GroupKind        = schema.GroupKind{Group: Group, Kind: {{ .Env.KIND }}Kind}.String()
	{{ .Env.KIND }}KindAPIVersion   = {{ .Env.KIND }}Kind + "." + SchemeGroupVersion.String()
	{{ .Env.KIND }}GroupVersionKind = SchemeGroupVersion.WithKind({{ .Env.KIND }}Kind)
)

func init() {
	SchemeBuilder.Register(&{{ .Env.KIND }}{}, &{{ .Env.KIND }}List{})
}
